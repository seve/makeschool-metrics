// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  commit: (where?: CommitWhereInput) => Promise<boolean>;
  pullRequest: (where?: PullRequestWhereInput) => Promise<boolean>;
  repo: (where?: RepoWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  commit: (where: CommitWhereUniqueInput) => CommitNullablePromise;
  commits: (args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Commit>;
  commitsConnection: (args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommitConnectionPromise;
  pullRequest: (
    where: PullRequestWhereUniqueInput
  ) => PullRequestNullablePromise;
  pullRequests: (args?: {
    where?: PullRequestWhereInput;
    orderBy?: PullRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PullRequest>;
  pullRequestsConnection: (args?: {
    where?: PullRequestWhereInput;
    orderBy?: PullRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PullRequestConnectionPromise;
  repo: (where: RepoWhereUniqueInput) => RepoNullablePromise;
  repoes: (args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Repo>;
  repoesConnection: (args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RepoConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCommit: (data: CommitCreateInput) => CommitPromise;
  updateCommit: (args: {
    data: CommitUpdateInput;
    where: CommitWhereUniqueInput;
  }) => CommitPromise;
  updateManyCommits: (args: {
    data: CommitUpdateManyMutationInput;
    where?: CommitWhereInput;
  }) => BatchPayloadPromise;
  upsertCommit: (args: {
    where: CommitWhereUniqueInput;
    create: CommitCreateInput;
    update: CommitUpdateInput;
  }) => CommitPromise;
  deleteCommit: (where: CommitWhereUniqueInput) => CommitPromise;
  deleteManyCommits: (where?: CommitWhereInput) => BatchPayloadPromise;
  createPullRequest: (data: PullRequestCreateInput) => PullRequestPromise;
  updatePullRequest: (args: {
    data: PullRequestUpdateInput;
    where: PullRequestWhereUniqueInput;
  }) => PullRequestPromise;
  updateManyPullRequests: (args: {
    data: PullRequestUpdateManyMutationInput;
    where?: PullRequestWhereInput;
  }) => BatchPayloadPromise;
  upsertPullRequest: (args: {
    where: PullRequestWhereUniqueInput;
    create: PullRequestCreateInput;
    update: PullRequestUpdateInput;
  }) => PullRequestPromise;
  deletePullRequest: (where: PullRequestWhereUniqueInput) => PullRequestPromise;
  deleteManyPullRequests: (
    where?: PullRequestWhereInput
  ) => BatchPayloadPromise;
  createRepo: (data: RepoCreateInput) => RepoPromise;
  updateRepo: (args: {
    data: RepoUpdateInput;
    where: RepoWhereUniqueInput;
  }) => RepoPromise;
  updateManyRepoes: (args: {
    data: RepoUpdateManyMutationInput;
    where?: RepoWhereInput;
  }) => BatchPayloadPromise;
  upsertRepo: (args: {
    where: RepoWhereUniqueInput;
    create: RepoCreateInput;
    update: RepoUpdateInput;
  }) => RepoPromise;
  deleteRepo: (where: RepoWhereUniqueInput) => RepoPromise;
  deleteManyRepoes: (where?: RepoWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  commit: (
    where?: CommitSubscriptionWhereInput
  ) => CommitSubscriptionPayloadSubscription;
  pullRequest: (
    where?: PullRequestSubscriptionWhereInput
  ) => PullRequestSubscriptionPayloadSubscription;
  repo: (
    where?: RepoSubscriptionWhereInput
  ) => RepoSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RepoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "stars_ASC"
  | "stars_DESC"
  | "link_ASC"
  | "link_DESC";

export type CommitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "message_ASC"
  | "message_DESC"
  | "date_ASC"
  | "date_DESC";

export type PullRequestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "merged_ASC"
  | "merged_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CommitUpdateWithoutRepoDataInput {
  message?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutCommitsInput>;
  date?: Maybe<String>;
}

export type CommitWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommitUpdateManyWithWhereNestedInput {
  where: CommitScalarWhereInput;
  data: CommitUpdateManyDataInput;
}

export interface CommitWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  repo?: Maybe<RepoWhereInput>;
  AND?: Maybe<CommitWhereInput[] | CommitWhereInput>;
  OR?: Maybe<CommitWhereInput[] | CommitWhereInput>;
  NOT?: Maybe<CommitWhereInput[] | CommitWhereInput>;
}

export interface CommitUpdateManyDataInput {
  message?: Maybe<String>;
  date?: Maybe<String>;
}

export interface PullRequestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  merged?: Maybe<Boolean>;
  merged_not?: Maybe<Boolean>;
  AND?: Maybe<PullRequestWhereInput[] | PullRequestWhereInput>;
  OR?: Maybe<PullRequestWhereInput[] | PullRequestWhereInput>;
  NOT?: Maybe<PullRequestWhereInput[] | PullRequestWhereInput>;
}

export interface CommitUpdateInput {
  message?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutCommitsInput>;
  date?: Maybe<String>;
  repo?: Maybe<RepoUpdateOneRequiredWithoutCommitsInput>;
}

export interface UserCreateOneWithoutPullRequestsInput {
  create?: Maybe<UserCreateWithoutPullRequestsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutCommitsInput {
  create?: Maybe<UserCreateWithoutCommitsInput>;
  update?: Maybe<UserUpdateWithoutCommitsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommitsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface RepoUpsertWithWhereUniqueNestedInput {
  where: RepoWhereUniqueInput;
  update: RepoUpdateDataInput;
  create: RepoCreateInput;
}

export interface UserUpdateWithoutCommitsDataInput {
  username?: Maybe<String>;
  repos?: Maybe<RepoUpdateManyInput>;
  pullRequests?: Maybe<PullRequestUpdateManyWithoutAuthorInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface RepoUpdateManyInput {
  create?: Maybe<RepoCreateInput[] | RepoCreateInput>;
  update?: Maybe<
    | RepoUpdateWithWhereUniqueNestedInput[]
    | RepoUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RepoUpsertWithWhereUniqueNestedInput[]
    | RepoUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
  connect?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
  set?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
  disconnect?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
  deleteMany?: Maybe<RepoScalarWhereInput[] | RepoScalarWhereInput>;
  updateMany?: Maybe<
    RepoUpdateManyWithWhereNestedInput[] | RepoUpdateManyWithWhereNestedInput
  >;
}

export interface PullRequestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PullRequestWhereInput>;
  AND?: Maybe<
    PullRequestSubscriptionWhereInput[] | PullRequestSubscriptionWhereInput
  >;
  OR?: Maybe<
    PullRequestSubscriptionWhereInput[] | PullRequestSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PullRequestSubscriptionWhereInput[] | PullRequestSubscriptionWhereInput
  >;
}

export interface RepoUpdateWithWhereUniqueNestedInput {
  where: RepoWhereUniqueInput;
  data: RepoUpdateDataInput;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
}

export interface RepoUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<RepoUpdatelanguagesInput>;
  stars?: Maybe<Int>;
  link?: Maybe<String>;
  commits?: Maybe<CommitUpdateManyWithoutRepoInput>;
}

export type PullRequestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RepoUpdatelanguagesInput {
  set?: Maybe<String[] | String>;
}

export interface RepoUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<RepoUpdatelanguagesInput>;
  stars?: Maybe<Int>;
  link?: Maybe<String>;
}

export interface CommitUpdateManyWithoutRepoInput {
  create?: Maybe<CommitCreateWithoutRepoInput[] | CommitCreateWithoutRepoInput>;
  delete?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  connect?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  set?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  disconnect?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  update?: Maybe<
    | CommitUpdateWithWhereUniqueWithoutRepoInput[]
    | CommitUpdateWithWhereUniqueWithoutRepoInput
  >;
  upsert?: Maybe<
    | CommitUpsertWithWhereUniqueWithoutRepoInput[]
    | CommitUpsertWithWhereUniqueWithoutRepoInput
  >;
  deleteMany?: Maybe<CommitScalarWhereInput[] | CommitScalarWhereInput>;
  updateMany?: Maybe<
    | CommitUpdateManyWithWhereNestedInput[]
    | CommitUpdateManyWithWhereNestedInput
  >;
}

export type RepoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommitUpdateWithWhereUniqueWithoutRepoInput {
  where: CommitWhereUniqueInput;
  data: CommitUpdateWithoutRepoDataInput;
}

export interface UserUpsertWithoutPullRequestsInput {
  update: UserUpdateWithoutPullRequestsDataInput;
  create: UserCreateWithoutPullRequestsInput;
}

export interface UserUpdateOneRequiredWithoutPullRequestsInput {
  create?: Maybe<UserCreateWithoutPullRequestsInput>;
  update?: Maybe<UserUpdateWithoutPullRequestsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPullRequestsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommitUpsertWithWhereUniqueWithoutRepoInput {
  where: CommitWhereUniqueInput;
  update: CommitUpdateWithoutRepoDataInput;
  create: CommitCreateWithoutRepoInput;
}

export interface CommitUpdateWithWhereUniqueWithoutUserInput {
  where: CommitWhereUniqueInput;
  data: CommitUpdateWithoutUserDataInput;
}

export interface CommitScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  AND?: Maybe<CommitScalarWhereInput[] | CommitScalarWhereInput>;
  OR?: Maybe<CommitScalarWhereInput[] | CommitScalarWhereInput>;
  NOT?: Maybe<CommitScalarWhereInput[] | CommitScalarWhereInput>;
}

export interface UserUpdateWithoutPullRequestsDataInput {
  username?: Maybe<String>;
  repos?: Maybe<RepoUpdateManyInput>;
  commits?: Maybe<CommitUpdateManyWithoutUserInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  repos_every?: Maybe<RepoWhereInput>;
  repos_some?: Maybe<RepoWhereInput>;
  repos_none?: Maybe<RepoWhereInput>;
  commits_every?: Maybe<CommitWhereInput>;
  commits_some?: Maybe<CommitWhereInput>;
  commits_none?: Maybe<CommitWhereInput>;
  pullRequests_every?: Maybe<PullRequestWhereInput>;
  pullRequests_some?: Maybe<PullRequestWhereInput>;
  pullRequests_none?: Maybe<PullRequestWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommitCreateInput {
  id?: Maybe<ID_Input>;
  message: String;
  user: UserCreateOneWithoutCommitsInput;
  date: String;
  repo: RepoCreateOneWithoutCommitsInput;
}

export interface PullRequestUpdateInput {
  author?: Maybe<UserUpdateOneRequiredWithoutPullRequestsInput>;
  title?: Maybe<String>;
  merged?: Maybe<Boolean>;
}

export interface UserCreateWithoutCommitsInput {
  id?: Maybe<ID_Input>;
  username: String;
  repos?: Maybe<RepoCreateManyInput>;
  pullRequests?: Maybe<PullRequestCreateManyWithoutAuthorInput>;
}

export interface CommitCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  message: String;
  date: String;
  repo: RepoCreateOneWithoutCommitsInput;
}

export interface RepoCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  languages?: Maybe<RepoCreatelanguagesInput>;
  stars?: Maybe<Int>;
  link: String;
  commits?: Maybe<CommitCreateManyWithoutRepoInput>;
}

export interface RepoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  stars?: Maybe<Int>;
  stars_not?: Maybe<Int>;
  stars_in?: Maybe<Int[] | Int>;
  stars_not_in?: Maybe<Int[] | Int>;
  stars_lt?: Maybe<Int>;
  stars_lte?: Maybe<Int>;
  stars_gt?: Maybe<Int>;
  stars_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  AND?: Maybe<RepoScalarWhereInput[] | RepoScalarWhereInput>;
  OR?: Maybe<RepoScalarWhereInput[] | RepoScalarWhereInput>;
  NOT?: Maybe<RepoScalarWhereInput[] | RepoScalarWhereInput>;
}

export interface CommitCreateManyWithoutRepoInput {
  create?: Maybe<CommitCreateWithoutRepoInput[] | CommitCreateWithoutRepoInput>;
  connect?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
}

export interface RepoUpdateManyWithWhereNestedInput {
  where: RepoScalarWhereInput;
  data: RepoUpdateManyDataInput;
}

export interface PullRequestCreateManyWithoutAuthorInput {
  create?: Maybe<
    PullRequestCreateWithoutAuthorInput[] | PullRequestCreateWithoutAuthorInput
  >;
  connect?: Maybe<PullRequestWhereUniqueInput[] | PullRequestWhereUniqueInput>;
}

export interface RepoUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<RepoUpdatelanguagesInput>;
  stars?: Maybe<Int>;
  link?: Maybe<String>;
}

export interface RepoCreateOneWithoutCommitsInput {
  create?: Maybe<RepoCreateWithoutCommitsInput>;
  connect?: Maybe<RepoWhereUniqueInput>;
}

export interface PullRequestUpdateManyWithoutAuthorInput {
  create?: Maybe<
    PullRequestCreateWithoutAuthorInput[] | PullRequestCreateWithoutAuthorInput
  >;
  delete?: Maybe<PullRequestWhereUniqueInput[] | PullRequestWhereUniqueInput>;
  connect?: Maybe<PullRequestWhereUniqueInput[] | PullRequestWhereUniqueInput>;
  set?: Maybe<PullRequestWhereUniqueInput[] | PullRequestWhereUniqueInput>;
  disconnect?: Maybe<
    PullRequestWhereUniqueInput[] | PullRequestWhereUniqueInput
  >;
  update?: Maybe<
    | PullRequestUpdateWithWhereUniqueWithoutAuthorInput[]
    | PullRequestUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PullRequestUpsertWithWhereUniqueWithoutAuthorInput[]
    | PullRequestUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<
    PullRequestScalarWhereInput[] | PullRequestScalarWhereInput
  >;
  updateMany?: Maybe<
    | PullRequestUpdateManyWithWhereNestedInput[]
    | PullRequestUpdateManyWithWhereNestedInput
  >;
}

export interface RepoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  stars?: Maybe<Int>;
  stars_not?: Maybe<Int>;
  stars_in?: Maybe<Int[] | Int>;
  stars_not_in?: Maybe<Int[] | Int>;
  stars_lt?: Maybe<Int>;
  stars_lte?: Maybe<Int>;
  stars_gt?: Maybe<Int>;
  stars_gte?: Maybe<Int>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  commits_every?: Maybe<CommitWhereInput>;
  commits_some?: Maybe<CommitWhereInput>;
  commits_none?: Maybe<CommitWhereInput>;
  AND?: Maybe<RepoWhereInput[] | RepoWhereInput>;
  OR?: Maybe<RepoWhereInput[] | RepoWhereInput>;
  NOT?: Maybe<RepoWhereInput[] | RepoWhereInput>;
}

export interface PullRequestUpdateWithWhereUniqueWithoutAuthorInput {
  where: PullRequestWhereUniqueInput;
  data: PullRequestUpdateWithoutAuthorDataInput;
}

export interface CommitSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommitWhereInput>;
  AND?: Maybe<CommitSubscriptionWhereInput[] | CommitSubscriptionWhereInput>;
  OR?: Maybe<CommitSubscriptionWhereInput[] | CommitSubscriptionWhereInput>;
  NOT?: Maybe<CommitSubscriptionWhereInput[] | CommitSubscriptionWhereInput>;
}

export interface PullRequestUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  merged?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  repos?: Maybe<RepoCreateManyInput>;
  commits?: Maybe<CommitCreateManyWithoutUserInput>;
  pullRequests?: Maybe<PullRequestCreateManyWithoutAuthorInput>;
}

export interface PullRequestUpsertWithWhereUniqueWithoutAuthorInput {
  where: PullRequestWhereUniqueInput;
  update: PullRequestUpdateWithoutAuthorDataInput;
  create: PullRequestCreateWithoutAuthorInput;
}

export interface PullRequestUpdateManyMutationInput {
  title?: Maybe<String>;
  merged?: Maybe<Boolean>;
}

export interface PullRequestScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  merged?: Maybe<Boolean>;
  merged_not?: Maybe<Boolean>;
  AND?: Maybe<PullRequestScalarWhereInput[] | PullRequestScalarWhereInput>;
  OR?: Maybe<PullRequestScalarWhereInput[] | PullRequestScalarWhereInput>;
  NOT?: Maybe<PullRequestScalarWhereInput[] | PullRequestScalarWhereInput>;
}

export interface CommitUpdateWithoutUserDataInput {
  message?: Maybe<String>;
  date?: Maybe<String>;
  repo?: Maybe<RepoUpdateOneRequiredWithoutCommitsInput>;
}

export interface PullRequestUpdateManyWithWhereNestedInput {
  where: PullRequestScalarWhereInput;
  data: PullRequestUpdateManyDataInput;
}

export interface RepoCreateManyInput {
  create?: Maybe<RepoCreateInput[] | RepoCreateInput>;
  connect?: Maybe<RepoWhereUniqueInput[] | RepoWhereUniqueInput>;
}

export interface PullRequestUpdateManyDataInput {
  title?: Maybe<String>;
  merged?: Maybe<Boolean>;
}

export interface CommitCreateWithoutRepoInput {
  id?: Maybe<ID_Input>;
  message: String;
  user: UserCreateOneWithoutCommitsInput;
  date: String;
}

export interface UserUpsertWithoutCommitsInput {
  update: UserUpdateWithoutCommitsDataInput;
  create: UserCreateWithoutCommitsInput;
}

export interface RepoCreateWithoutCommitsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  languages?: Maybe<RepoCreatelanguagesInput>;
  stars?: Maybe<Int>;
  link: String;
}

export interface RepoUpdateOneRequiredWithoutCommitsInput {
  create?: Maybe<RepoCreateWithoutCommitsInput>;
  update?: Maybe<RepoUpdateWithoutCommitsDataInput>;
  upsert?: Maybe<RepoUpsertWithoutCommitsInput>;
  connect?: Maybe<RepoWhereUniqueInput>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  repos?: Maybe<RepoUpdateManyInput>;
  commits?: Maybe<CommitUpdateManyWithoutUserInput>;
  pullRequests?: Maybe<PullRequestUpdateManyWithoutAuthorInput>;
}

export interface RepoUpdateWithoutCommitsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<RepoUpdatelanguagesInput>;
  stars?: Maybe<Int>;
  link?: Maybe<String>;
}

export interface CommitUpsertWithWhereUniqueWithoutUserInput {
  where: CommitWhereUniqueInput;
  update: CommitUpdateWithoutUserDataInput;
  create: CommitCreateWithoutUserInput;
}

export interface RepoUpsertWithoutCommitsInput {
  update: RepoUpdateWithoutCommitsDataInput;
  create: RepoCreateWithoutCommitsInput;
}

export interface UserCreateOneWithoutCommitsInput {
  create?: Maybe<UserCreateWithoutCommitsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PullRequestCreateInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneWithoutPullRequestsInput;
  title: String;
  merged: Boolean;
}

export interface UserCreateWithoutPullRequestsInput {
  id?: Maybe<ID_Input>;
  username: String;
  repos?: Maybe<RepoCreateManyInput>;
  commits?: Maybe<CommitCreateManyWithoutUserInput>;
}

export interface CommitCreateManyWithoutUserInput {
  create?: Maybe<CommitCreateWithoutUserInput[] | CommitCreateWithoutUserInput>;
  connect?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
}

export interface CommitUpdateManyMutationInput {
  message?: Maybe<String>;
  date?: Maybe<String>;
}

export interface RepoCreatelanguagesInput {
  set?: Maybe<String[] | String>;
}

export interface CommitUpdateManyWithoutUserInput {
  create?: Maybe<CommitCreateWithoutUserInput[] | CommitCreateWithoutUserInput>;
  delete?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  connect?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  set?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  disconnect?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  update?: Maybe<
    | CommitUpdateWithWhereUniqueWithoutUserInput[]
    | CommitUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommitUpsertWithWhereUniqueWithoutUserInput[]
    | CommitUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommitScalarWhereInput[] | CommitScalarWhereInput>;
  updateMany?: Maybe<
    | CommitUpdateManyWithWhereNestedInput[]
    | CommitUpdateManyWithWhereNestedInput
  >;
}

export interface RepoUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<RepoUpdatelanguagesInput>;
  stars?: Maybe<Int>;
  link?: Maybe<String>;
  commits?: Maybe<CommitUpdateManyWithoutRepoInput>;
}

export interface RepoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RepoWhereInput>;
  AND?: Maybe<RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput>;
  OR?: Maybe<RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput>;
  NOT?: Maybe<RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput>;
}

export interface PullRequestCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  merged: Boolean;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface PullRequestEdge {
  node: PullRequest;
  cursor: String;
}

export interface PullRequestEdgePromise
  extends Promise<PullRequestEdge>,
    Fragmentable {
  node: <T = PullRequestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PullRequestEdgeSubscription
  extends Promise<AsyncIterator<PullRequestEdge>>,
    Fragmentable {
  node: <T = PullRequestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RepoSubscriptionPayload {
  mutation: MutationType;
  node: Repo;
  updatedFields: String[];
  previousValues: RepoPreviousValues;
}

export interface RepoSubscriptionPayloadPromise
  extends Promise<RepoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RepoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RepoPreviousValuesPromise>() => T;
}

export interface RepoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RepoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RepoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RepoPreviousValuesSubscription>() => T;
}

export interface PullRequestConnection {
  pageInfo: PageInfo;
  edges: PullRequestEdge[];
}

export interface PullRequestConnectionPromise
  extends Promise<PullRequestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PullRequestEdge>>() => T;
  aggregate: <T = AggregatePullRequestPromise>() => T;
}

export interface PullRequestConnectionSubscription
  extends Promise<AsyncIterator<PullRequestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PullRequestEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePullRequestSubscription>() => T;
}

export interface AggregateCommit {
  count: Int;
}

export interface AggregateCommitPromise
  extends Promise<AggregateCommit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommitSubscription
  extends Promise<AsyncIterator<AggregateCommit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CommitEdge {
  node: Commit;
  cursor: String;
}

export interface CommitEdgePromise extends Promise<CommitEdge>, Fragmentable {
  node: <T = CommitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommitEdgeSubscription
  extends Promise<AsyncIterator<CommitEdge>>,
    Fragmentable {
  node: <T = CommitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Commit {
  id: ID_Output;
  message: String;
  date: String;
}

export interface CommitPromise extends Promise<Commit>, Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
  user: <T = UserPromise>() => T;
  date: () => Promise<String>;
  repo: <T = RepoPromise>() => T;
}

export interface CommitSubscription
  extends Promise<AsyncIterator<Commit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  message: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  date: () => Promise<AsyncIterator<String>>;
  repo: <T = RepoSubscription>() => T;
}

export interface CommitNullablePromise
  extends Promise<Commit | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
  user: <T = UserPromise>() => T;
  date: () => Promise<String>;
  repo: <T = RepoPromise>() => T;
}

export interface AggregateRepo {
  count: Int;
}

export interface AggregateRepoPromise
  extends Promise<AggregateRepo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRepoSubscription
  extends Promise<AsyncIterator<AggregateRepo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommitSubscriptionPayload {
  mutation: MutationType;
  node: Commit;
  updatedFields: String[];
  previousValues: CommitPreviousValues;
}

export interface CommitSubscriptionPayloadPromise
  extends Promise<CommitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommitPreviousValuesPromise>() => T;
}

export interface CommitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommitPreviousValuesSubscription>() => T;
}

export interface RepoConnection {
  pageInfo: PageInfo;
  edges: RepoEdge[];
}

export interface RepoConnectionPromise
  extends Promise<RepoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RepoEdge>>() => T;
  aggregate: <T = AggregateRepoPromise>() => T;
}

export interface RepoConnectionSubscription
  extends Promise<AsyncIterator<RepoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RepoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRepoSubscription>() => T;
}

export interface CommitPreviousValues {
  id: ID_Output;
  message: String;
  date: String;
}

export interface CommitPreviousValuesPromise
  extends Promise<CommitPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
  date: () => Promise<String>;
}

export interface CommitPreviousValuesSubscription
  extends Promise<AsyncIterator<CommitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  message: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
}

export interface Repo {
  id: ID_Output;
  name: String;
  description?: String;
  languages: String[];
  stars?: Int;
  link: String;
}

export interface RepoPromise extends Promise<Repo>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  languages: () => Promise<String[]>;
  stars: () => Promise<Int>;
  link: () => Promise<String>;
  commits: <T = FragmentableArray<Commit>>(args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RepoSubscription
  extends Promise<AsyncIterator<Repo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  languages: () => Promise<AsyncIterator<String[]>>;
  stars: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
  commits: <T = Promise<AsyncIterator<CommitSubscription>>>(args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RepoNullablePromise
  extends Promise<Repo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  languages: () => Promise<String[]>;
  stars: () => Promise<Int>;
  link: () => Promise<String>;
  commits: <T = FragmentableArray<Commit>>(args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PullRequest {
  id: ID_Output;
  title: String;
  merged: Boolean;
}

export interface PullRequestPromise extends Promise<PullRequest>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  title: () => Promise<String>;
  merged: () => Promise<Boolean>;
}

export interface PullRequestSubscription
  extends Promise<AsyncIterator<PullRequest>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  merged: () => Promise<AsyncIterator<Boolean>>;
}

export interface PullRequestNullablePromise
  extends Promise<PullRequest | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  title: () => Promise<String>;
  merged: () => Promise<Boolean>;
}

export interface PullRequestPreviousValues {
  id: ID_Output;
  title: String;
  merged: Boolean;
}

export interface PullRequestPreviousValuesPromise
  extends Promise<PullRequestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  merged: () => Promise<Boolean>;
}

export interface PullRequestPreviousValuesSubscription
  extends Promise<AsyncIterator<PullRequestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  merged: () => Promise<AsyncIterator<Boolean>>;
}

export interface PullRequestSubscriptionPayload {
  mutation: MutationType;
  node: PullRequest;
  updatedFields: String[];
  previousValues: PullRequestPreviousValues;
}

export interface PullRequestSubscriptionPayloadPromise
  extends Promise<PullRequestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PullRequestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PullRequestPreviousValuesPromise>() => T;
}

export interface PullRequestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PullRequestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PullRequestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PullRequestPreviousValuesSubscription>() => T;
}

export interface CommitConnection {
  pageInfo: PageInfo;
  edges: CommitEdge[];
}

export interface CommitConnectionPromise
  extends Promise<CommitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommitEdge>>() => T;
  aggregate: <T = AggregateCommitPromise>() => T;
}

export interface CommitConnectionSubscription
  extends Promise<AsyncIterator<CommitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommitSubscription>() => T;
}

export interface RepoPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  languages: String[];
  stars?: Int;
  link: String;
}

export interface RepoPreviousValuesPromise
  extends Promise<RepoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  languages: () => Promise<String[]>;
  stars: () => Promise<Int>;
  link: () => Promise<String>;
}

export interface RepoPreviousValuesSubscription
  extends Promise<AsyncIterator<RepoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  languages: () => Promise<AsyncIterator<String[]>>;
  stars: () => Promise<AsyncIterator<Int>>;
  link: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  username: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  repos: <T = FragmentableArray<Repo>>(args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commits: <T = FragmentableArray<Commit>>(args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pullRequests: <T = FragmentableArray<PullRequest>>(args?: {
    where?: PullRequestWhereInput;
    orderBy?: PullRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  repos: <T = Promise<AsyncIterator<RepoSubscription>>>(args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commits: <T = Promise<AsyncIterator<CommitSubscription>>>(args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pullRequests: <T = Promise<AsyncIterator<PullRequestSubscription>>>(args?: {
    where?: PullRequestWhereInput;
    orderBy?: PullRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  repos: <T = FragmentableArray<Repo>>(args?: {
    where?: RepoWhereInput;
    orderBy?: RepoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commits: <T = FragmentableArray<Commit>>(args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pullRequests: <T = FragmentableArray<PullRequest>>(args?: {
    where?: PullRequestWhereInput;
    orderBy?: PullRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregatePullRequest {
  count: Int;
}

export interface AggregatePullRequestPromise
  extends Promise<AggregatePullRequest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePullRequestSubscription
  extends Promise<AsyncIterator<AggregatePullRequest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RepoEdge {
  node: Repo;
  cursor: String;
}

export interface RepoEdgePromise extends Promise<RepoEdge>, Fragmentable {
  node: <T = RepoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RepoEdgeSubscription
  extends Promise<AsyncIterator<RepoEdge>>,
    Fragmentable {
  node: <T = RepoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Repo",
    embedded: false
  },
  {
    name: "Commit",
    embedded: false
  },
  {
    name: "PullRequest",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
